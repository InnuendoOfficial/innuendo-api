// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  device_id String? @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  email String @unique
  hash String
  firstname String?
  lastname String?

  has_endometriosis EndoStatus @default(undefined)

  reports Report[]
  access_codes AccessCode[]
  endoscores Endoscore[]

  @@map("users")
}

model Pro {
  id Int @id @default(autoincrement())

  first_name String
  last_name String

  email String @unique

  phone Int
  subscription_type String
  hash String

  last_payment_date String?
  next_payment_date String?
  stripe_customer StripeCustomer?
  is_subscription_valid Boolean @default(false)
}

model StripeCustomer {
  id Int @id @default(autoincrement())

  customer_id String @unique
  pro Pro @relation(fields: [pro_id], references: [id])

  pro_id Int @unique
}

model Endoscore {
  id Int @id @default(autoincrement())

  score Float
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  user_id Int

  created_at DateTime @default(now())
}

model SymptomType {
  id Int @id @default(autoincrement())

  name String
  unit_measure UnitMeasure
  icon_url String?
  illustration String?
  description String?

  symptoms Symptom[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Symptom {
  id Int @id @default(autoincrement())

  value SymptomValue?

  symptom_type SymptomType @relation(fields: [symptom_type_id], references: [id], onDelete: Cascade)
  report Report @relation(fields: [report_id], references: [id], onDelete: Cascade)

  symptom_type_id Int
  report_id Int
}

model SymptomValue {
  id Int @id @default(autoincrement())

  int Int?
  string String?
  bool Boolean?

  symptom Symptom @relation(fields: [symptom_id], references: [id], onDelete: Cascade)

  symptom_id Int @unique
}

model Report {
  id Int @id @default(autoincrement())

  date DateTime @default(now())
  symptoms Symptom[]

  user User? @relation(fields: [user_id], references: [id], onDelete:  SetNull)
  user_id Int?
}

model AccessCode {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  value Int
  preferences AccessCodePreferences[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

model AccessCodePreferences {
  id Int @id @default(autoincrement())

  symptom_id Int
  showable Boolean

  access_code AccessCode @relation(fields: [access_code_id], references: [id], onDelete: Cascade)
  access_code_id Int
}

model Prospect {
  id Int @id @default(autoincrement())

  email String
  name String
  object String
}

model SubscriptionRequest {
  id Int @id @default(autoincrement())

  first_name String
  last_name String
  age Int
  occupation String
  email String
  phone Int
  wanted_licenses String
  subscription_type String
}

model PasswordResetCode {
  id Int @id @default(autoincrement())

  value Int
  email String
}

enum UnitMeasure {
  int
  string
  boolean
}

enum EndoStatus {
  true
  false
  undefined
}